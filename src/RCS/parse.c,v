head	1.8;
access;
symbols;
locks
	psi:1.8; strict;
comment	@ * @;


1.8
date	95.05.08.06.33.33;	author psi;	state Exp;
branches;
next	1.7;

1.7
date	94.11.24.00.37.15;	author psi;	state Exp;
branches;
next	1.6;

1.6
date	94.10.28.20.46.57;	author psi;	state Exp;
branches;
next	1.5;

1.5
date	94.10.28.00.32.35;	author psi;	state Exp;
branches;
next	1.4;

1.4
date	94.10.05.01.10.57;	author psi;	state Exp;
branches;
next	1.3;

1.3
date	94.09.23.00.36.41;	author psi;	state Exp;
branches;
next	1.2;

1.2
date	94.09.13.05.49.05;	author psi;	state Exp;
branches;
next	1.1;

1.1
date	94.09.06.07.01.31;	author psi;	state Exp;
branches;
next	;


desc
@contains procedures to parse the moa source file
@


1.8
log
@just before some changes
@
text
@/* Copyright (c) 1993 University of Missouri-Rolla
   All rights reserved.

   parse.c - the parser module.
   
   v0.1 Scott Thibault - 6/93
   v0.2 Scott Thibault - 7/93
   v0.3 Scott Thibault - 10/93
           At the end of proc_def a call is made to free_tmp_mem();

*/

#include <stdio.h>
#include <string.h>
#include "psi.h"
#include "dist.h"
#include "parse.h"
#include "sys.h"
#include "ops.h"

#include "code.e"
#include "part.e"
#include "dist.e"
#include "psi.e"
#include "vect.e"
#include "ident.e"
#include "sys.e"
#include "moa_func.e"

#define MAXCONST 1024
#define MAXSYMHASH 512
#ifndef TRUE
#define TRUE 1
#define FALSE 0
#endif

#define sym_key(i) ((i)%MAXSYMHASH)

extern emit_t emit;  /* current look ahead token */
extern char *what_name();
extern int line_no; /* current line number */
extern int syntax_report;  /* suppress syntax errors when FALSE */
extern int prove; /* TRUE if reductions are to be output */

int shp_num=0; 
double const_numbers[MAXCONST];
int const_vars[MAXCONST];
ident_t *sym_hash[MAXSYMHASH];  /* hash table of identifiers */
ident_t dumb_var;               /* dummy variable */
char buf[256];                  /* temporary string storage */
char expr_str[1024];  /* current line being parsed */
char call_str[1024];  /* a procedure call */

 /* forward references */
parser_t *expression();
statement_t *statement_list();  
statement_t *assignment_part();


/* unmark_statics - unmark statically declared objects since garbage collection
     will leaved them maked because the are'nt part of the heap */
unmark_statics()

{
  dumb_var.type&=NMARK;
}


/* ret_table - returns the symbol table */
ident_t **ret_table(int *size)

{
  *size=MAXSYMHASH;
  return(sym_hash);
}


/* clear_syms - emptys the symbol table */
clear_syms()

{
  int i;

  for (i=0; i<MAXSYMHASH; i++) {
    sym_hash[i]=NULL;
  }
}


/* find_sym - look up an identifier in the symbol table.  If talk is 
     TRUE and the identifier is not found report an error. */

ident_t *find_sym(int index,int talk)

{
  ident_t *ident;

  ident=sym_hash[sym_key(index)];
  while ((ident!=NULL)&&(ident->index!=index)) {
    ident=ident->next;
  }

  if ((ident==NULL)&&talk) report("Undefined identifier");
  return(ident);
}  


/* insert_sym - insert a new identifier into the symbol table */

insert_sym(ident_t *ident, int index)

{
  if (find_sym(index,FALSE)!=NULL) 
    report("duplicate variable definition");
  else {
    ident->next=sym_hash[sym_key(index)];
    sym_hash[sym_key(index)]=ident;
    ident->index=index;
  }
}


/* search_parameters - searches the symbol table for parameters and
     calls code_global_int with any integers found.  code_global_int
     is a routine in dist.c that distributes that integer over all
     processors so that it is global. */

search_parameters()

{
  int i;
  ident_t *ident;

  for (i=0; i<MAXSYMHASH; i++) {
    ident=sym_hash[i];
    while (ident!=NULL) {
      if (ISPARAMETER(ident->flags)) {
	if (ident->type==VARIABLE) code_global_int(ident);
	else if (ident->array.dim->value==0) {
	  code_global_int(ident);
	  SETGLOBAL(ident->flags);
	}
      }
      ident=ident->next;
    }
  }
}


/* report - report an error */

report(char *text)

{
  printf("Error on line %d: %s.\n",line_no,text);
}


/* expect - expects a certain symbol.  If it is not there, an error is
     reported.  The next symbol is fetched. */

expect(int sym)

{
  if ((emit.index!=sym)&&syntax_report) {
    report("syntax error");
    syntax_report=FALSE;
  }
  get_symbol();
}


/* expect_name - expects a name.  If it is not there, an error is
     reported.  The next symbol is fetched. The index of the name
     is returned. */

int expect_name()

{
  int a;
  
  a=emit.arg;
  expect(NAME1);
  return(a);
}


/* expect_number - expects a number.  If it is not there, an error is
     reported.  The next symbol is fetched. The value of the number
     is returned. */

double expect_number()

{
  int a,b,mag;
  double ret;

  a=emit.arg;
  expect(NUMBER1);
  if (emit.index==PERIOD1) {
    expect(PERIOD1);
    b=emit.arg;
    expect(NUMBER1);
    mag=1;
    ret=b;
    while (b>=mag) {
      ret/=10;
      mag*=10;
    }
  } else ret=0.0;
  ret+=a;

  return(ret);
}



/* convert_shp - converts a vector shape into a vector of identifiers for
     that shape.  This is used to convert a shape of an expression into
     the form of shape used by the ident_t type. */

convert_shp(ident_t **ident_p, expr_t *expr, ident_t *dim)

{
  int i;
  vect_t *shp;
  s_expr_t *s;
  
  if (!SCALAR(expr->dim)) {
    report("Dimension of allocation expression unknown.");
  } else if (expr->dim->ident->value!=1) {
    report("Dimension of allocation expression must be 1.");
  }

  shp=make_vect(expr);
  if (!SCALAR(shp->shp)) {
    report("Shape of allocation vector expression unknown.");
  } else if (dim->value!=shp->shp->ident->value) {
      report("Dimension mismatch in dynamic array allocation.");
  }

  (*ident_p)->array.shp=
    (ident_t **) get_mem(shp->shp->ident->value*sizeof(ident_t *));
  for (i=0; i<shp->shp->ident->value; i++) {
    s=red_rav(shp,i);
    (*ident_p)->array.shp[i]=make_ident(s);
  }

}


/**********
The following routines correspond to grammar rules for a recursive decent 
parser 
***********/


parser_t *var_access()
{
  int index;
  ident_t *ident,*tmp;

  if (emit.index==NAME1) {
    sprintf(expr_str+strlen(expr_str),"%s",what_name());
    index=emit.arg;
  } else {
    index=LAST;
  }
  expect(NAME1);
  ident=find_sym(index,TRUE);
  if (!HASSHAPE(ident->flags)) {
    report("Illegal use of dynamic array (shape not defined yet).");
  }
  return(psi_access(find_sym(index,FALSE)));
}


/* vector_const2 - parse a constant vector and store it in a constant array
     identifier. */

ident_t *vector_const2()
{
  ident_t *ret;
  int i,first,use_rav;

  ret=get_ident();
  ret->array.dim=&const1;
  expect(LESS1);
  sprintf(expr_str+strlen(expr_str),"<");
  i=0;
  first=TRUE;
  use_rav=FALSE;
  while ((emit.index==NUMBER1)||(emit.index==NAME1)) {
    if (emit.index==NUMBER1) {
      const_numbers[i]=expect_number();
      sprintf(expr_str+strlen(expr_str),"%f",const_numbers[i]);
      const_vars[i]=-1;
    } else {
      use_rav=TRUE;
      sprintf(expr_str+strlen(expr_str),"%s",what_name());
      const_vars[i]=expect_name();
    }
    if (emit.index!=GREATER1) sprintf(expr_str+strlen(expr_str)," ");
    if (i<MAXCONST-1) {
      i++;
    } else {
      if (first) report("Constant to large");
      first=FALSE;
    }
  }
  ret->array.shp=(ident_t **) get_mem(sizeof(ident_t *));
  ret->array.shp[0]=get_ident();
  ret->array.shp[0]->type=CONSTANT;
  ret->array.shp[0]->real=FALSE;
  ret->array.shp[0]->value=i;
  if (use_rav) {
    ret->type=RAV;
    ret->array.rav=(s_expr_t **) get_mem(i*sizeof(s_expr_t *));
    i--;
    for (; i>=0; i--) {
      ret->array.rav[i]=get_s_expr();
      if (const_vars[i]>=0) {
	ret->array.rav[i]->ident=find_sym(const_vars[i],TRUE);
      } else {
	ret->array.rav[i]->ident=get_ident();
	ret->array.rav[i]->ident->type=CONSTANT;
	ret->array.rav[i]->ident->value=const_numbers[i];
      }
    }
  } else {
    ret->type=CONST_ARRAY;
    ret->array.cnst=(double *) get_mem(i*sizeof(double));
    i--;
    for (; i>=0; i--) ret->array.cnst[i]=const_numbers[i];
  }
  SETGLOBAL(ret->flags);

  expect(GREATER1);
  sprintf(expr_str+strlen(expr_str),">");
  return(ret);
}
    
parser_t *term()
{
  parser_t *ret;

  if (emit.index==NAME1) {
    ret=var_access();
  } else if (emit.index==LESS1) {
    ret=psi_access(vector_const2());
  } else {
    report("Expecting a variable or constant");
    get_symbol();
    ret=NULL;
  }
  
  return(ret);
}

int is_unop(int x)
{
  int ret;
  
  ret=FALSE;
  ret|=(emit.index==LEFTBRACKET1);
  ret|=(emit.index==IOTA1);
  ret|=(emit.index==SHP1);
  ret|=(emit.index==DIM1);
  ret|=(emit.index==TAU1);
  ret|=(emit.index==RAV1);
  ret|=(emit.index==PLUS1);
  ret|=(emit.index==MINUS1);
  ret|=(emit.index==TIMES1);
  ret|=(emit.index==DIVIDE1);
  ret|=(emit.index==REVERSE1);

  return(ret);
}

op_t *operator()
{
  op_t *op;

  op=(op_t *) get_mem(sizeof(op_t));

  if (emit.index==LEFTBRACKET1) {
    expect(LEFTBRACKET1);
    sprintf(expr_str+strlen(expr_str)," (");
    op->omega=TRUE;
    op->func=NULL;
    op->next=operator();
    if (!op->next->omega) report("Expecting omega as an operator.");
    expect(RIGHTBRACKET1);
    sprintf(expr_str+strlen(expr_str),")");
    expect(OMEGA1);
    sprintf(expr_str+strlen(expr_str)," omega ");
    op->part=psi_access(vector_const2());
    sprintf(expr_str+strlen(expr_str)," ");
  } else {
    op->next=NULL;
    switch (emit.index) {
    case PLUS1:
      expect(emit.index);
      if (emit.index==RED1) {
        sprintf(expr_str+strlen(expr_str)," +red ");
	expect(RED1);
	op->func=psi_red_plus;
      } else {
	sprintf(expr_str+strlen(expr_str)," + ");
	op->func=psi_plus;
      }
      break;
    case MINUS1:
      expect(emit.index);
      if (emit.index==RED1) {
	sprintf(expr_str+strlen(expr_str)," -red ");
	expect(RED1);
	op->func=psi_red_minus;
      } else {
	sprintf(expr_str+strlen(expr_str)," - ");
	op->func=psi_minus;
      }
      break;
    case TIMES1:
      expect(emit.index);
      if (emit.index==RED1) {
	sprintf(expr_str+strlen(expr_str)," *red ");
	expect(RED1);
	op->func=psi_red_times;
      } else {
	sprintf(expr_str+strlen(expr_str)," * ");
	op->func=psi_times;
      }
      break;
    case DIVIDE1:
      expect(emit.index);
      if (emit.index==RED1) {
	sprintf(expr_str+strlen(expr_str)," /red ");
	expect(RED1);
	op->func=psi_red_div;
      } else {
	sprintf(expr_str+strlen(expr_str)," / ");
	op->func=psi_div;
      }
      break;
    case PSI1:
      sprintf(expr_str+strlen(expr_str)," psi ");
      op->func=psi_psi;
      expect(emit.index);
      break;
    case IOTA1:
      sprintf(expr_str+strlen(expr_str)," iota ");
      op->func=psi_iota;
      expect(emit.index);
      break;
    case SHP1:
      sprintf(expr_str+strlen(expr_str)," shp ");
      op->func=psi_shp;
      expect(emit.index);
      break;
    case DIM1:
      sprintf(expr_str+strlen(expr_str)," dim ");
      op->func=psi_dim;
      expect(emit.index);
      break;
    case TAU1:
      sprintf(expr_str+strlen(expr_str)," tau ");
      op->func=psi_tau;
      expect(emit.index);
      break;
    case RAV1:
      sprintf(expr_str+strlen(expr_str)," rav ");
      op->func=psi_rav;
      expect(emit.index);
      break;
    case TAKE1:
      sprintf(expr_str+strlen(expr_str)," take ");
      op->func=psi_take;
      expect(emit.index);
      break;
    case DROP1:
      sprintf(expr_str+strlen(expr_str)," drop ");
      op->func=psi_drop;
      expect(emit.index);
      break;
    case PTAKE1:
      sprintf(expr_str+strlen(expr_str)," take ");
      op->func=psi_ptake;
      expect(emit.index);
      break;
    case PDROP1:
      sprintf(expr_str+strlen(expr_str)," drop ");
      op->func=psi_pdrop;
      expect(emit.index);
      break;
    case CAT1:
      sprintf(expr_str+strlen(expr_str)," cat ");
      op->func=psi_cat;
      expect(emit.index);
      break;
    case REVERSE1:
      sprintf(expr_str+strlen(expr_str)," reverse ");
      op->func=psi_reverse;
      expect(emit.index);
      break;
    default:
      report("Expecting an operator");
      expect(emit.index);
      break;
    }
    op->omega=(emit.index==OMEGA1);
    if (op->omega) {
      expect(OMEGA1);
      sprintf(expr_str+strlen(expr_str)," omega ");
      op->part=psi_access(vector_const2());
      sprintf(expr_str+strlen(expr_str)," ");
    }
  }

  return(op);
}

int isop(int i)
{
  int ret;

  ret=FALSE;
  ret|=(i==PLUS1);
  ret|=(i==MINUS1);
  ret|=(i==TIMES1);
  ret|=(i==DIVIDE1);
  ret|=(i==PSI1);
  ret|=(i==DROP1);
  ret|=(i==TAKE1);
  ret|=(i==PDROP1);
  ret|=(i==PTAKE1);
  ret|=(i==CAT1);
  ret|=(i==LEFTBRACKET1);
  return(ret);
}

parser_t *factor()
{
  op_t *op;
  parser_t *ret,*right;

  if (emit.index==LEFTPAREN1) {
    expect(LEFTPAREN1);
    sprintf(expr_str+strlen(expr_str),"(");
    ret=expression();
    expect(RIGHTPAREN1);
    sprintf(expr_str+strlen(expr_str),")");
  } else if ((emit.index==LESS1)||(emit.index==NAME1)) {
    ret=term();
  } else if (is_unop(emit.index)) {
    op=operator();
    right=expression();
    if (op->omega) ret=psi_omega1(right,op);
    else {
      ret=(*(op->func))(right);
      free(op);
    }
  } else {
    report("Expecting a factor.");
    get_symbol();
    ret=NULL;
  }

  return(ret);
}

parser_t *expression()
{
  parser_t *left,*right;
  op_t *op;

  left=factor();
  while (isop(emit.index)) {
    op=operator();
    right=factor();

    if (op->omega) left=psi_omega2(left,right,op);
    else {
      left=(*(op->func))(left,right);
      free(op);
    }
  }

  return(left);
}  

statement_t *assignment()
{
  int index;
  char *name;
  statement_t *ret;
  vect_t *loc;

  expr_str[0]=0;

  if (emit.index==LESS1) {
    loc=get_vect();
    loc->ident=vector_const2();
    loc->loc=&s_const0;
    loc->index=&s_const0;
    loc->shp=get_s_expr();
    loc->shp->ident=get_ident();
    loc->shp->ident->type=CONSTANT;
    loc->shp->ident->real=FALSE;
    loc->shp->ident->value=loc->ident->array.shp[0]->value;
    if (emit.index==PDROP1) {
      expect(PDROP1);
      sprintf(expr_str+strlen(expr_str)," pdrop ");
    } else {
      expect (PSI1);
      sprintf(expr_str+strlen(expr_str)," psi ");
    }
  } else loc=NULL;
  
  name=what_name();
  index=expect_name();
  ret=assignment_part(loc,index,name);
  
  return(ret);
}

statement_t *assignment_part(vect_t *loc, int index, char *name)
{
  statement_t *assign,*alloc,*ret;
  ident_t *tmp;
  parser_t *result,*expr;
  
  reduction_init();

  assign=get_statement(ASSIGN);

  if (emit.index==PDROP1) {
    /* a pdrop on the left hand side */
    
    if (loc==NULL) {
      tmp=find_sym(index,TRUE);
      expr=psi_access(tmp);
      loc=make_vect(expr->psi);
    } else {
      report("Syntax error");
    }
    sprintf(expr_str+strlen(expr_str),name);
    sprintf(expr_str+strlen(expr_str)," drop ");
    expect(PDROP1);
    name=what_name();
    index=expect_name();
  }
  sprintf(expr_str+strlen(expr_str),name);
  tmp=find_sym(index,TRUE);
  expect(EQUAL1);
  sprintf(expr_str+strlen(expr_str),"=");
  expr=expression();
  assign->str=(char *) get_tmp_mem(strlen(expr_str)+1);
  strcpy(assign->str,expr_str);
  if (prove)
    fprintf(rfile,"Reducing:\n%s\n",expr_str);
  
  result=psi_access(tmp);
  result->psi->loc=loc;
  result->psi->bound=expr->psi->shp;
  assign->d.assign->expr=expr->psi;
  assign->d.assign->result=result->psi;
  psi_reduce(assign,TRUE);
  
  return(assign);
}

statement_t *allocate()
{
  statement_t *ret;
  ident_t *array;
  parser_t *expr;

  ret=get_statement(DYNAMIC);
  expect(ALLOCATE1);
  array=find_sym(expect_name(),TRUE);
  expr=expression();
  if (expr->psi->op==NOP) {
  } else {
    report("Expecting an identifier");
  }
  if (!HASSHAPE(array->flags)) {
    convert_shp(&array,expr->psi,array->array.dim);
    SETSHAPE(array->flags);
    SETUSED(array->flags);
    ret->d.dynamic=(psi_access(array))->psi;
  } else {
    report("Array argument to allocate is not dynamic.");
  }

  return(ret);
}

statement_t *forall_statement()
{
  statement_t *loop;
  int depth;
  parser_t *left_bound,*right_bound,*loop_var;

  loop=get_statement(LOOP);

  expect(FOR1);
  expect(LEFTPAREN1);
  left_bound=term();
  loop->d.loop->lower=left_bound->psi;
  expect(LEQ1);
  loop_var=term();
  loop->d.loop->var=loop_var->psi;
  expect(LESS1);
  right_bound=term();
  loop->d.loop->upper=right_bound->psi;
  expect(RIGHTPAREN1);

  expect(LEFTBRACE1);
  loop->d.loop->body=statement_list();
  expect(RIGHTBRACE1);

  return(loop);
}

expr_t *actual()
{
  int index;
  expr_t *expr;
  ident_t *ident,*tmp;

  if (emit.index==NAME1) {
    sprintf(call_str+strlen(call_str),"_%s",what_name());
    index=emit.arg;
  } else {
    index=LAST;
  }
  expect(NAME1);
  ident=find_sym(index,FALSE);
  expr=(psi_access(ident))->psi;

  if (!HASSHAPE(ident->flags)) {
    report("Illegal use of dynamic array (shape not defined yet).");
  }

  return(expr);
}

statement_t *actual_list()
{
  statement_t *ret;
  reduced_t *node;

  node=get_reduced();
  node->type=SKIP;
  node->d.frag=actual();
  node->next=get_reduced();
  node->next->type=ALLOCATE;
  node->next->d.frag=node->d.frag;
  node->next->next=NULL;
  ret=get_statement(CALL);
  ret->d.reduced=node;
  node=node->next;
  
  while (emit.index==COMMA1) {
    expect(COMMA1);
    sprintf(call_str+strlen(call_str),",");
    node->next=get_reduced();
    node=node->next;
    node->type=ALLOCATE;
    node->d.frag=actual();
    node->next=NULL;
  }

  return(ret);
}

statement_t *call_statement(char *name)
{
  statement_t *ret;
  
  call_str[0]=0;

  sprintf(call_str+strlen(call_str),"%s(",name);
  expect(LEFTPAREN1);
  ret=actual_list();
  sprintf(call_str+strlen(call_str),");\n");
  expect(RIGHTPAREN1);
  expect(SEMI1);

  ret->str=(char *) get_mem(strlen(call_str)+1);
  strcpy(ret->str,call_str);

  return(ret);
}

statement_t *statement()
{
  int index;
  char *name;
  
  statement_t *statement;

  if (emit.index==NAME1) {
    name=what_name();
    index=expect_name();
    if (emit.index==LEFTPAREN1) {
      statement=call_statement(name);
    } else {
      expr_str[0]=0;
      statement=assignment_part(NULL,index,name);
      expect(SEMI1);
    }
  } else if (emit.index==LESS1) {
    statement=assignment();
    expect(SEMI1);
  }
  else if (emit.index==FOR1)
    statement=forall_statement();
  else if (emit.index==ALLOCATE1) {
    statement=allocate();
    expect(SEMI1);
  } else statement=NULL;

  return(statement);
}

statement_t *statement_list()
{
  statement_t *list,*node;

  if ((emit.index==NAME1)||(emit.index==FOR1)||(emit.index==LESS1)||
      (emit.index==ALLOCATE1)) {
    list=statement();
    list->next=NULL;
    collect_garbage(NULL,save_list,NULL);
    node=list;
    while ((emit.index==NAME1)||(emit.index==FOR1)||(emit.index==LESS1)||
	   (emit.index==ALLOCATE1)) {
      node->next=statement();
      node=node->next;
      node->next=NULL;
      collect_garbage(NULL,save_list,NULL);
    }
  } else list=NULL;

  return(list);
}

array_def(ident_t *ident)
{
  int i,tau;
  double num;

  expect(HAT1);
  num=expect_number();
  ident->array.dim=get_ident();
  ident->array.dim->type=CONSTANT;
  ident->array.dim->value=num;

  ident->real=1;  
  tau=num;
  if (emit.index==LESS1) {
    expect(LESS1);
    if (tau==0) {
      ident->array.shp=NULL;
    } else ident->array.shp=(ident_t **) get_mem(tau*sizeof(ident_t *));
    for (i=0; i<tau; i++) {
      if (emit.index==NUMBER1) {
	num=expect_number();
	ident->array.shp[i]=get_ident();
	ident->array.shp[i]->type=CONSTANT;
	ident->array.shp[i]->value=num;
      } else {
	ident->array.shp[i]=find_sym(expect_name(),FALSE);
	if (ident->array.shp[i]==NULL) {
	  report("undeclared variable");
	  ident->array.shp[i]=&dumb_var;
	}
	if (!ISPARAMETER(ident->array.shp[i]->flags))
	  report("only formal parameters are allowed in the shape definition");
      }
    }
    expect(GREATER1);
    SETSHAPE(ident->flags);
  } else {
    UNSETSHAPE(ident->flags);
    SETDYNAMIC(ident->flags);
  }
}

var_def()
{
  ident_t *ident;
  int index,i;

  expect(ARRAY1);
  index=expect_name();
  ident=get_ident();
  ident->type=ARRAY;
  ident->real=TRUE;
  sprintf(ident->string,"_%s",what_name());
  array_def(ident);
  insert_sym(ident,index);
}

var_def_part()
{
  var_def();
  expect(SEMI1);
  while (emit.index==ARRAY1) {
    var_def();
    expect(SEMI1);
  }
}

/* vector_const - parse a const array definition */

vector_const(ident_t *ident)
{
  int tau,i;
  double num;

  tau=1;
  for (i=0; i<ident->array.dim->value; i++) {
    tau*=ident->array.shp[i]->value;
  }
  fprintf(vfile,"  double %s[]={",ident->string,tau);
  expect(LESS1);
  ident->array.cnst=(double *) get_mem(tau*sizeof(double));
  for (i=0; i<tau; i++) {
    num=expect_number();
    ident->array.cnst[i]=num;
    if (i==0) 
      fprintf(vfile,"%f",num);
    else {
      if (!(i%5))
        fprintf(vfile,",\n    %f",num);
      else
        fprintf(vfile,", %f",num);
    }
  }
  fprintf(vfile,"};\n");
  expect(GREATER1);
}

const_def()
{
  int index;
  int i,tau;
  double num;
  ident_t *ident;

  ident=get_ident();
  SETUSED(ident->flags);
  expect(CONST1);
  if (emit.index==ARRAY1) {
    expect(ARRAY1);
    ident->type=EMBEDED_ARRAY;
    index=expect_name();
    sprintf(ident->string,"_%s",what_name());
    array_def(ident);
    expect(EQUAL1);
    if (ident->array.dim->value==0) {
      ident->type=CONSTANT;
      ident->real=TRUE;
      ident->value=expect_number();
    } else 
      vector_const(ident);
    insert_sym(ident,index);
  } else {
    report("expecting 'array'");
    get_symbol();
  }
} 

const_def_part()
{
  const_def();
  expect(SEMI1);
  while (emit.index==CONST1) {
    const_def();
    expect(SEMI1);
  }
}

global_def()
{
  int index;
  ident_t *ident;

  expect(GLOBAL1);
  if (emit.index==NAME1) {
    index=emit.arg;
  } else {
    index=LAST;
  }
  expect(NAME1);
  ident=find_sym(index,FALSE);
  if (!ISPARAMETER(ident->flags))
    SETGLOBAL(ident->flags);
  expect(SEMI1);
}

def_part()
{
  while ((emit.index==CONST1)||(emit.index==ARRAY1)||(emit.index==GLOBAL1)) {
    if (emit.index==CONST1)
      const_def_part();
    if (emit.index==ARRAY1)
      var_def_part();
    if (emit.index==GLOBAL1)
      global_def();
  }
}
    
statement_t *blockbody()
{
  statement_t *body;

  expect(LEFTBRACE1);
  if ((emit.index==CONST1)||(emit.index==ARRAY1)) def_part();
  clear_saves();
  body=statement_list();
  expect(RIGHTBRACE1);

  return(body);
}

param_def()
{
  ident_t *ident;
  int index;
  char *name;

  ident=get_ident();
  SETPARAMETER(ident->flags);
  if (emit.index==INT1) {
    expect(INT1);
    if (host) {
      fprintf(hostfile,"int ");
      fprintf(vfile,"  int ");
    } else fprintf(cfile,"int ");
    ident->type=VARIABLE;
    SETSHAPE(ident->flags);
  }
  if (emit.index==ARRAY1) {
    expect(ARRAY1);
    if (host) {
      fprintf(hostfile,"double ");
      fprintf(vfile,"  double *");
    } else fprintf(cfile,"double ");
    ident->type=ARRAY;
  }
  index=expect_name();
  sprintf(ident->string,"_%s",what_name());
  if (host) {
    fprintf(hostfile,ident->string);
    fprintf(vfile,ident->string);
  } else fprintf(cfile,ident->string);

  if (ident->type==ARRAY) {
    if (host) {
      fprintf(hostfile,"[]");
    } else fprintf(cfile,"[]");
    array_def(ident);
  }

  if (host)
    fprintf(vfile,";\n");
    
  insert_sym(ident,index);

  if (!HASSHAPE(ident->flags)) {
    report("Parameters must have a specified shape");
  }
}

formal_list()
{
  param_def();
  while (emit.index==COMMA1) {
    expect(COMMA1);
    if (host) 
      fprintf(hostfile,", ");
    else 
      fprintf(cfile,", ");
    param_def();
  }
}

proc_def()
{
  int i;
  char buf[1024];
  int index;
  char *name;
  statement_t *body;

  /* reset the counts of utility variables used */
  max_dim=0;
  max_combined=0;
  forall_num=0;
  red_num=0;
  const_array_num=0;

  /* open temporary files */
  if ((tfile=fopen("temp$$$$.moa","wt"))==NULL) {
    fatal("Couldn't create temporary file.");
  }

  if ((vfile=fopen("vtemp$$$$.moa","wt"))==NULL) {
    fatal("Couldn't create temporary file.");
  }

  if (host) {
    if ((hfile=fopen("htemp$$$$.moa","wt"))==NULL)
      fatal("Couldn't create temporary file.");
  }

  fprintf(vfile,"  double *shift;\n");

  name=what_name();
  index=expect_name();
  fprintf(cfile,name);
  if (host) fprintf(hostfile,name);
  expect(LEFTPAREN1);
  fprintf(cfile,"(");
  if (genmpi) fprintf (cfile,"int argc, char *argv[],");
  if (host) fprintf(hostfile,"(");
  if (emit.index==INT1)
    formal_list();
  if (emit.index==ARRAY1)
    formal_list();
  expect(RIGHTPAREN1);
  fprintf(cfile,")\n\n");
  if (host) fprintf(hostfile,")\n\n");
  fprintf(cfile,"{\n");
  if (host) fprintf(hostfile,"{\n");
  if (n_procs>1)
    /* initailize int and float scalar paramenters */
    search_parameters();

  body=blockbody();
  code_c(body,partition(body));

  fclose(tfile);
  fclose(vfile);
  if (host)  fclose(hfile);

  /* allocate utility variables */
  for (i=0; i<max_combined; i++) {
    fprintf(cfile,"  double *offset%d;\n",i);
  }

  for (i=0; i<max_dim; i++) {
    fprintf(cfile,"  int i%d;\n",i);
    if (host) fprintf(hostfile,"  int i%d;\n",i);
  }

  /* copy temporary files to the output */

  if ((vfile=fopen("vtemp$$$$.moa","r"))==NULL) {
    fatal("Couldn't open temporary file.");
  }
  fgets(buf,1024,vfile);
  while (!feof(vfile)) {
    fputs(buf,cfile);
    fgets(buf,1024,vfile);
  }
  fclose(vfile);
  fputs("\n",cfile);

  
  if (n_procs>1) {
    if (genmpi) fprintf (cfile,"  NODE_INIT(argc,argv);\n");
    else fprintf(cfile,"  NODE_INIT(%d);\n\n",n_procs);
  }

  if (host) {
    fprintf(hostfile,"\n  HOST_INIT(%d);\n\n",n_procs);
  }

  if (picl) {
    fprintf(cfile,"  TRACE_START(\"%s\");\n",picl_file);
    if (host)
      fprintf(hostfile,"  TRACE_START(\"%s\");\n",picl_file);
  }

  if (host) {
    if ((hfile=fopen("htemp$$$$.moa","r"))==NULL) {
      fatal("Couldn't open temporary file.");
    }
    fgets(buf,1024,hfile);
    while (!feof(hfile)) {
      fputs(buf,hostfile);
      fgets(buf,1024,hfile);
    }
    fclose(hfile);
  }

  if ((tfile=fopen("temp$$$$.moa","r"))==NULL) {
    fatal("Couldn't open temporary file.");
  }
  fgets(buf,1024,tfile);
  while (!feof(tfile)) {
    fputs(buf,cfile);
    fgets(buf,1024,tfile);
  }
  fclose(tfile);

  if (picl) {
    fprintf(cfile,"  TRACE_END();\n");
    if (host)
      fprintf(hostfile,"  TRACE_END();\n");
  }

  if (genmpi) fprintf (cfile,"  NODE_CLEANUP();\n");
  fprintf(cfile,"}\n");
  if (host) {
    fprintf(hostfile,"}\n");
  }

  free_tmp_mem();    /* free any temporary memory used for this procdure */
}

directive()
{
  int name;
  char *tmp;

  expect(DOLLAR1);
  tmp=what_name();
  if (strcmp(tmp,"procs")==0) {
    /* number of processors */
    name=expect_name();
    n_procs=expect_number();
  } else if (strcmp(tmp,"arch")==0) {
    /* archtecture type */
    name=expect_name();
    tmp=what_name();
    if (strcmp(tmp,"mpimac")==0) {
      if (host) fatal ("mpi not allowed with host");
      else genmpi=TRUE;
    }
    fprintf(cfile,"#include \"%s.h\"\n\n",tmp);
    if (host) fprintf(hostfile,"#include \"%s.h\"\n\n",tmp);
    expect_name();
  } else if (strcmp(tmp,"hostname")==0) {
    /* name of a host file */
    if (genmpi) fatal ("host not allowed with mpi");
    name=expect_name();
    tmp=what_name();
    host_name=(char *) get_mem(strlen(tmp)*sizeof(char));
    strcpy(host_name,tmp);
    if ((hostfile=fopen(host_name,"wt"))==NULL) {
      fatal("Couldn't open host output file");
    }
    fprintf(hostfile,"#include \"moalib.e\"\n\n");
    expect_name();
    host=TRUE;
  } else if (strcmp(tmp,"trace")==0) {
    /* have parallel programs print information while running */
    para_trace=TRUE;
    expect_name();
  } else if (strcmp(tmp,"picl")==0) {
    /* generate picl trace files */
    name=expect_name();
    tmp=what_name();
    picl_file=(char *) get_mem(strlen(tmp)*sizeof(char));
    strcpy(picl_file,tmp);
    expect_name();
    picl=TRUE;
  } else {
    name=expect_name();
  }
}

programx()
{
  int i;

  dumb_var.type=CONSTANT;
  dumb_var.value=0;
  SETPARAMETER(dumb_var.flags);

  fprintf(cfile,"#include <stdlib.h>\n");
  fprintf(cfile,"#include \"moalib.e\"\n\n");

  while (emit.index==DOLLAR1) {
    directive();
  }

  if (picl) {
    fprintf(cfile,"#include \"picl.h\"\n\n");
    if (host)
      fprintf(hostfile,"#include \"picl.h\"\n\n");
  }

  while (emit.index==NAME1) {
    clear_syms();
    proc_def();
    fprintf(cfile,"\n\n");
  }
  if (host) fclose(hostfile);
}
@


1.7
log
@tmcmahon: adding comments.
@
text
@d138 1
a138 1
	if (ident->type==VAR_FLOAT) code_global_int(ident);
d313 1
a313 1
  ret->array.shp[0]->type=FLOAT;
d326 1
a326 1
	ret->array.rav[i]->ident->type=FLOAT;
d608 1
a608 1
    loc->shp->ident->type=FLOAT;
d858 1
a858 1
  ident->array.dim->type=FLOAT;
d872 1
a872 1
	ident->array.shp[i]->type=FLOAT;
d965 1
a965 1
      ident->type=FLOAT;
d1044 1
a1044 1
    ident->type=VAR_FLOAT;
d1283 1
a1283 1
  dumb_var.type=FLOAT;
@


1.6
log
@tmcmahon: changed to allow blah psi blah on the left hand side.
@
text
@d901 1
@


1.5
log
@*** empty log message ***
@
text
@d611 7
a617 2
    expect(PDROP1);
    sprintf(expr_str+strlen(expr_str)," pdrop ");
@


1.4
log
@tmcmahon:  not much.  changed a few comments.  'bout it.
@
text
@d1123 1
d1168 5
a1172 1
  if (n_procs>1) fprintf(cfile,"  NODE_INIT(%d);\n\n",n_procs);
d1212 1
d1236 4
d1245 1
@


1.3
log
@tmcmahon:  changed array_def so all 0 dimensional arrays are declared
as double instead of int
@
text
@d150 1
a150 1
/* report - report and error */
d159 1
a159 1
/* expect - expects a certain symbol.  If it is not there an error is
d173 1
a173 1
/* expect_name - expects a name.  If it is not there an error is
d188 1
a188 1
/* expect_number - expects a number.  If it is not there an error is
a258 1

a281 2


d314 1
a342 2
  

a343 1

a359 1

a360 1

a379 1

a380 1

a402 1
      sprintf(expr_str+strlen(expr_str)," + ");
a522 1

a523 1

a541 1

a542 1

a571 1

a572 1

a591 1

a592 1

d609 1
a621 1

a622 1

a667 1

a668 1

a693 1

a694 1

a720 1

a721 1

a743 1

a744 1

a772 1

a773 1

a791 1

a792 1

a822 1

a823 1

a844 1

a845 1

a855 6
/* taken out for now until we can get everything else stabalized 
   thom mcmahon 9-15-94 
  if (num==0) ident->real=0;
  else ident->real=1;
*/
  
a886 1

a887 1

a900 1

a901 1

a910 1

a913 1

a940 1

a941 1

a970 1

a971 1

a980 1

a981 1

a998 1

a999 1

a1010 1

a1011 1

a1023 1

a1024 1
     
a1072 1

a1073 1

a1085 1

a1086 1

a1215 1

a1261 1

a1262 1

@


1.2
log
@changed const_def so a the ident of a scalar has ident->real=TRUE
@
text
@d890 3
d895 3
a897 1
    
@


1.1
log
@Initial revision
@
text
@d1004 1
@
